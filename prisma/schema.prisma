// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//user role 
enum UserRole {
  STUDENT
  FACULTY
  LIBRARIAN
  ADMIN
}

//Book status :
enum BookStatus {
  AVAILABLE
  CHECKED_OUT
  RESERVED
  UNDER_MAINTENANCE
  LOST
}

//book reservation status :
enum ReservationStatus {
  PENDING
  APROVED
  REJECTED
  COMPLETED
  CANCLED
  OVERDUE
  RETURNED
}

//user model 
model User {
  id               String        @id @default(cuid())
  name             String
  role             UserRole      @default(STUDENT)
  email            String        @unique
  password         String
  isVerified       Boolean       @default(false)
  reservationLimit Int           @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  Reservation      Reservation[]
}

//book model 
model Book {
  id              String        @id @default(cuid())
  isbn            String        @unique
  title           String
  edition         String
  publisher       String
  publicationYear Int
  pageCout        Int
  language        String
  coverUrl        String?
  digitalCopyUrl  String
  keywords        String[]
  authors         String[]
  status          BookStatus    @default(AVAILABLE)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Reservation     Reservation[]
}

//book reservation model :

model Reservation {
  id         String            @id @default(cuid())
  userId     String
  bookId     String
  startDate  DateTime
  returnDate DateTime
  status     ReservationStatus @default(PENDING)
  user       User              @relation(fields: [userId], references: [id])
  book       Book              @relation(fields: [bookId], references: [id])
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}
